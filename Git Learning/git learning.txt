Learning GIT
Installing GIT
	run the below command in terminal
	sudo apt-get install git-all

First Time GIT setup

	run the below command to see current setting and files
		git config Ðlist --show-origin
		git config --global user.name ÒRizwan KhanÓ
		git config --global user.email Òrizwanwakil2018@gmail.comÓ


Default editor GIT setup
	By default, git will use system editor but we can setup any editor we can 
	Setup notepad++ by specifying path.
		git config --global core.editor emacs

Checking GIT settings
	run the below command and will show the setting
		git config --list
		git config user.name

How to get help for GIT
	We can get help regarding GIT command by running below command
       	git help command_name
		git command_name help or git command_name -h
		man git-comand_name
	for example
		git help config
		git add Ðh

Creating a GIT repository
	We can get git repository by two ways
1. Convert local directory in repository
2. Clone from github
Move the desired directory, where we want git repository, run below command
	git init
to create repository on existing repository, run below command
	git clone https://repository_url.git  directory_name
	user@github.com:path_to_repository









Recording Changes in GIT repository
	Git repository file status
		git status or git status -s
	Adding new or modified files to repository
		create a file or modify a file first
		first git the status using command
			git status
		then add file to repository using command to be tracked
			git add .   or git add file_name
		then add the file to local repository
			git commit Ðm Òchange in fileÓ
		

Creating .gitignore file in GIT repository

	.gitignore file is used for file which we donÕt want to keep track of it.

		cat .gitignore
			*.[oa]		this will ignore file ending with o or a
			*~			this will ignore file ending with ~
			!.a			this will override other rules
			/TODO			only ignore TODO file 
			Build/		ignore all file in Build directory
			doc/*.txt		ignore txt file in doc directory 
			doc/**/*.pdf	ignore all pdf file in doc directory

To See changes to files
	we can see the changes done in file by using command below
		git diff
		git diff --staged

Tracking new file or adding to Staging area
	Below command will add untracked file new created or modified file to  
       tracked file or in to staging area
		git add file_name		only one file will tracked
		git add .			all file will be tracked

Taking out file or files from staging to un-staging area
	git reset HEAD file_name


Committing change to local repository	
		
	Enter below command, this will open default editor, type message
		git commit
		git commit Ðm ÒHelloÓ

		git commit Ða Ðm Òrecord change without using add commandÓ


	
create repository locally & connect to remote github repository
		git init 		--> this command will create git repository locally
		login to github and create repository then issue below command in local repositor
		git remote add origin https://github.com/rizwanwakil2019/repository_name
		
		
	create repository on github & connect to local repository
		login to github and create repository
		now from local system, clone the remote repository
			git clone https://github.com/rizwanwakil2019/repository_name
			
Adding changes to staging, then local repository then shifting to remote repository --> this is also called workflow
	git add .
	git commit -m "changes"
	git push

Finding changes or compare in file
	git diff

Reverting Change
	how to un do un-commented , commented changes
	1.	undo un-commented changes
		git checkout -- . or filename
		
	2.	undo commented changes
		git log		to see commit history
		: 			exit from log
		git revert comment_id 		take the comment id from log and enter
	
		
	3.	resetting changes
		git reset --hard comment id		take the comment id from log and enter 		this is risky methods, be care full
		
		
Braches
	To get all branches
		git branch
		
	To create branch
		git branch name_of_branch
	
	To use branch
		git checkout name_of_branch
	
	To merge branch to master branch
		git merge name_of_branch
		
	to delete branch
		git checkout -d name_of_branch				use this command if branch is merge
		git checkout -D name_of_branch				use this command to delete branch if it's not merge
	
	
	
	Work flow
		git branch								-- to list all branches
		git branch -b new_brance				-- to create branch with name new_brance
		make some changes in files
		git add
		git commit
		git push origin new_brance				-- push changes to new_brance in github
		git push origin :delete_branch_name		-- to delete the branch
		
Ignore File
	create .gitignore file and file which we don't want to push to server
	
Stage
	this is equal to draf feature in git.
	for example your are working make some change, mean time your boss make some change as will, so to save your changes in stage,
	apply boss changes then apply your change from stash.
	
	git stash save "stash_name"					save the current changes in to stash with name stash_name
	git stash list								list all stashes
	git stash apply unique_id
	git stash drop unique_id
	git stash pop
	git stash clear
	
	
	Work flow
		1.	make some change in files
		2.	boss come to you and ask for urgent work
		3.	to save your changes in draft   
				git stash save "my_work"
		4.	do the boss work, save , commit and push to github
		5.	issue git stash list command to get the stash id 
		6.	apply changes back using git stash apply unique_id
		7.	add to stage area, commit and push to github
		
